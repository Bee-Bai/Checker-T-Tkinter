import tkinter as tk
from tkinter import messagebox, filedialog
import json

BOARD_SIZE = 8
CELL_SIZE = 80

class ThaiCheckersApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Thai Checkers")

        self.canvas = tk.Canvas(root, width=BOARD_SIZE * CELL_SIZE, height=BOARD_SIZE * CELL_SIZE)
        self.canvas.pack()

        self.turn_label = tk.Label(root, text="Turn: Red", font=("Arial", 16))
        self.turn_label.pack()

        self.draw_board()
        self.initialize_pieces()

        self.selected_piece = None
        self.selected_piece_position = None
        self.current_turn = "red"
        self.selection_outline = None

        self.canvas.bind("<Button-1>", self.on_click)

        self.save_button = tk.Button(root, text="Save Game", command=self.save_game)
        self.save_button.pack(side=tk.LEFT, padx=10)

        self.load_button = tk.Button(root, text="Load Game", command=self.load_game)
        self.load_button.pack(side=tk.LEFT)

    def draw_board(self):
        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                x1 = col * CELL_SIZE
                y1 = row * CELL_SIZE
                x2 = x1 + CELL_SIZE
                y2 = y1 + CELL_SIZE

                color = "white" if (row + col) % 2 == 0 else "gray"
                self.canvas.create_rectangle(x1, y1, x2, y2, fill=color)

    def initialize_pieces(self):
        for row in range(2):
            for col in range(BOARD_SIZE):
                if (row + col) % 2 == 1:
                    self.create_piece(row, col, "red")

        for row in range(6, 8):
            for col in range(BOARD_SIZE):
                if (row + col) % 2 == 1:
                    self.create_piece(row, col, "black")

    def create_piece(self, row, col, color):
        x1 = col * CELL_SIZE + CELL_SIZE // 2
        y1 = row * CELL_SIZE + CELL_SIZE // 2
        radius = CELL_SIZE // 2 - 10
        self.canvas.create_oval(x1 - radius, y1 - radius, x1 + radius, y1 + radius, fill=color)

    def on_click(self, event):
        col = event.x // CELL_SIZE
        row = event.y // CELL_SIZE
        if 0 <= col < BOARD_SIZE and 0 <= row < BOARD_SIZE:
            self.select_piece(row, col)

    def select_piece(self, row, col):
        piece = self.get_piece_position(row, col)

        if self.selection_outline:
            self.canvas.delete(self.selection_outline)

        if self.selected_piece is None:
            if piece and self.is_current_turn_piece(piece):
                self.selected_piece = piece
                self.selected_piece_position = (row, col)
                x1 = col * CELL_SIZE
                y1 = row * CELL_SIZE
                x2 = x1 + CELL_SIZE
                y2 = y1 + CELL_SIZE
                self.selection_outline = self.canvas.create_rectangle(x1, y1, x2, y2, outline="lime", width=3)
        else:
            if self.is_valid_move(row, col):
                self.move_piece(row, col)
                self.check_for_king(row, col)
                self.switch_turn()
                self.check_game_over()

            self.selected_piece = None
            self.selected_piece_position = None

    def is_current_turn_piece(self, piece):
        piece_color = self.canvas.itemcget(piece, "fill")
        return (self.current_turn == "red" and piece_color in ["red", "darkred"]) or \
               (self.current_turn == "black" and piece_color in ["black", "gray20"])

    def is_valid_move(self, target_row, target_col):
        if (target_row + target_col) % 2 == 1:
            row_diff = target_row - self.selected_piece_position[0]
            col_diff = target_col - self.selected_piece_position[1]

            piece_color = self.canvas.itemcget(self.selected_piece, "fill")
            is_king = piece_color in ["darkred", "gray20"]

            if not is_king:
                if abs(col_diff) == 1 and ((self.current_turn == "red" and row_diff == 1) or
                                           (self.current_turn == "black" and row_diff == -1)):
                    return self.get_piece_position(target_row, target_col) is None

            if is_king:
                if abs(col_diff) == abs(row_diff):
                    step_row = 1 if row_diff > 0 else -1
                    step_col = 1 if col_diff > 0 else -1
                    current_row, current_col = self.selected_piece_position
                    opponent_found = False
                    captured_piece = None

                    while current_row != target_row and current_col != target_col:
                        current_row += step_row
                        current_col += step_col
                        piece_in_path = self.get_piece_position(current_row, current_col)

                        if piece_in_path:
                            piece_color_in_path = self.canvas.itemcget(piece_in_path, "fill")

                            if piece_color_in_path in [self.current_turn,
                                                       "darkred" if self.current_turn == "red" else "gray20"]:
                                return False

                            if piece_color_in_path != self.current_turn and not opponent_found:
                                opponent_found = True
                                captured_piece = piece_in_path
                            else:
                                return False

                    if not opponent_found:
                        return True

                    if opponent_found and self.get_piece_position(target_row, target_col) is None:
                        if captured_piece:
                            self.canvas.delete(captured_piece)
                        return True

        if abs(col_diff) == 2 and abs(row_diff) == 2:
            mid_row = (self.selected_piece_position[0] + target_row) // 2
            mid_col = (self.selected_piece_position[1] + target_col) // 2
            opponent_piece = self.get_piece_position(mid_row, mid_col)
            if opponent_piece and self.canvas.itemcget(opponent_piece, "fill") != self.current_turn:
                return (self.current_turn == "red" and row_diff == 2) or (self.current_turn == "black" and row_diff == -2)

        return False

    def get_piece_position(self, row, col):
        items = self.canvas.find_overlapping(col * CELL_SIZE, row * CELL_SIZE,
                                             (col + 1) * CELL_SIZE, (row + 1) * CELL_SIZE)
        for item in items:
            if self.canvas.itemcget(item, "fill") in ("red", "black", "darkred", "gray20"):
                return item
        return None

    def move_piece(self, target_row, target_col):
        piece = self.selected_piece
        if piece:
            if abs(target_row - self.selected_piece_position[0]) == 2:
                mid_row = (self.selected_piece_position[0] + target_row) // 2
                mid_col = (self.selected_piece_position[1] + target_col) // 2
                opponent_piece = self.get_piece_position(mid_row, mid_col)
                if opponent_piece:
                    self.canvas.delete(opponent_piece)

            self.canvas.move(piece, (target_col - self.selected_piece_position[1]) * CELL_SIZE,
                             (target_row - self.selected_piece_position[0]) * CELL_SIZE)

    def check_for_king(self, row, col):
        piece = self.get_piece_position(row, col)
        if self.current_turn == "red" and row == 7:
            self.canvas.itemconfig(piece, fill="darkred")
        elif self.current_turn == "black" and row == 0:
            self.canvas.itemconfig(piece, fill="gray20")

    def switch_turn(self):
        self.current_turn = "black" if self.current_turn == "red" else "red"
        self.turn_label.config(text=f"Turn: {'Red' if self.current_turn == 'red' else 'Black'}")

    def check_game_over(self):
        red_pieces = 0
        black_pieces = 0

        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                piece = self.get_piece_position(row, col)
                if piece:
                    color = self.canvas.itemcget(piece, "fill")
                    if color in ["red", "darkred"]:
                        red_pieces += 1
                    elif color in ["black", "gray20"]:
                        black_pieces += 1

        if red_pieces == 0 or black_pieces == 0:
            winner = "Black Wins!" if red_pieces == 0 else "Red Wins!"
            if messagebox.askyesno("Game Over", winner + " Do you want to reset the game?"):
                self.reset_game()
            else:
                self.root.quit()

    def reset_game(self):
        self.canvas.delete("all")
        self.draw_board()
        self.initialize_pieces()
        self.current_turn = "red"
        self.turn_label.config(text="Turn: Red")

    def save_game(self):
        game_state = {
            "turn": self.current_turn,
            "pieces": {}
        }
        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                piece = self.get_piece_position(row, col)
                if piece:
                    color = self.canvas.itemcget(piece, "fill")
                    game_state["pieces"][f"{row},{col}"] = color

        file_path = filedialog.asksaveasfilename(defaultextension=".json",
                                                   filetypes=[("JSON files", "*.json"),
                                                              ("All files", "*.*")])
        if file_path:
            with open(file_path, 'w') as f:
                json.dump(game_state, f)

    def load_game(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json"),
                                                           ("All files", "*.*")])
        if file_path:
            with open(file_path, 'r') as f:
                game_state = json.load(f)

            self.canvas.delete("all")
            self.draw_board()

            self.current_turn = game_state["turn"]
            self.turn_label.config(text=f"Turn: {'Red' if self.current_turn == 'red' else 'Black'}")

            for key, color in game_state["pieces"].items():
                row, col = map(int, key.split(','))
                self.create_piece(row, col, color)

if __name__ == "__main__":
    root = tk.Tk()
    app = ThaiCheckersApp(root)
    root.mainloop()
