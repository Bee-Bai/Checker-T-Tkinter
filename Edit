import tkinter as tk

BOARD_SIZE = 8
CELL_SIZE = 80

class ThaiCheckersApp:
    def __init__(self, root):
        self.root = root
        self.root.title("หมากฮอสไทย")

        self.canvas = tk.Canvas(root, width=BOARD_SIZE * CELL_SIZE, height=BOARD_SIZE * CELL_SIZE)
        self.canvas.pack()

        self.turn_label = tk.Label(root, text="Turn: Red", font=("Arial", 16))
        self.turn_label.pack()

        self.draw_board()
        self.initialize_pieces()

        self.selected_piece = None
        self.selected_piece_position = None
        self.current_turn = "red"
        self.selection_outline = None

        self.canvas.bind("<Button-1>", self.on_click)

    def draw_board(self):
        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                x1 = col * CELL_SIZE
                y1 = row * CELL_SIZE
                x2 = x1 + CELL_SIZE
                y2 = y1 + CELL_SIZE

                color = "white" if (row + col) % 2 == 0 else "gray"
                self.canvas.create_rectangle(x1, y1, x2, y2, fill=color)

    def initialize_pieces(self):
        for row in range(2):
            for col in range(BOARD_SIZE):
                if (row + col) % 2 == 1:
                    self.create_piece(row, col, "red")

        for row in range(6, 8):
            for col in range(BOARD_SIZE):
                if (row + col) % 2 == 1:
                    self.create_piece(row, col, "black")

    def create_piece(self, row, col, color):
        x1 = col * CELL_SIZE + CELL_SIZE // 2
        y1 = row * CELL_SIZE + CELL_SIZE // 2
        radius = CELL_SIZE // 2 - 10
        piece_id = self.canvas.create_oval(x1 - radius, y1 - radius, x1 + radius, y1 + radius, fill=color)

    def on_click(self, event):
        col = event.x // CELL_SIZE
        row = event.y // CELL_SIZE
        if 0 <= col < BOARD_SIZE and 0 <= row < BOARD_SIZE:
            self.select_piece(row, col)

    def select_piece(self, row, col):
        piece = self.get_piece_position(row, col)

        if self.selection_outline:
            self.canvas.delete(self.selection_outline)

        if self.selected_piece is None:
            if piece and self.is_current_turn_piece(piece):
                self.selected_piece = piece
                self.selected_piece_position = (row, col)

                x1 = col * CELL_SIZE
                y1 = row * CELL_SIZE
                x2 = x1 + CELL_SIZE
                y2 = y1 + CELL_SIZE
                self.selection_outline = self.canvas.create_rectangle(x1, y1, x2, y2, outline="lime", width=3)
        else:
            if self.is_valid_move(row, col):
                self.move_piece(row, col)
                self.check_for_king(row, col)
                self.switch_turn()
            self.selected_piece = None
            self.selected_piece_position = None

    def is_current_turn_piece(self, piece):
        piece_color = self.canvas.itemcget(piece, "fill")
        if self.current_turn == "red" and piece_color in ["red", "darkred"]:
            return True
        elif self.current_turn == "black" and piece_color in ["black", "gray20"]:
            return True
        return False

    def is_valid_move(self, target_row, target_col):
        if (target_row + target_col) % 2 == 1:
            row_diff = target_row - self.selected_piece_position[0]
            col_diff = target_col - self.selected_piece_position[1]
            
            piece_color = self.canvas.itemcget(self.selected_piece, "fill")
            is_king = piece_color in ["darkred", "gray20"]

            if not is_king:
                if abs(col_diff) == 1 and ((self.current_turn == "red" and row_diff == 1) or 
                                           (self.current_turn == "black" and row_diff == -1)):
                    if self.get_piece_position(target_row, target_col) is None:
                        return True
            else:
                if abs(col_diff) == abs(row_diff):
                    step_row = 1 if row_diff > 0 else -1
                    step_col = 1 if col_diff > 0 else -1
                    for i in range(1, abs(row_diff)):
                        if self.get_piece_position(self.selected_piece_position[0] + i * step_row,
                                                   self.selected_piece_position[1] + i * step_col) is not None:
                            return False
                    if self.get_piece_position(target_row, target_col) is None:
                        return True

            if abs(col_diff) == 2 and abs(row_diff) == 2:
                mid_row = (self.selected_piece_position[0] + target_row) // 2
                mid_col = (self.selected_piece_position[1] + target_col) // 2
                opponent_piece = self.get_piece_position(mid_row, mid_col)
                if opponent_piece and self.canvas.itemcget(opponent_piece, "fill") != self.current_turn:
                    if self.get_piece_position(target_row, target_col) is None:
                        if (self.current_turn == "red" and row_diff == 2) or (self.current_turn == "black" and row_diff == -2):
                            self.canvas.delete(opponent_piece)
                            return True
        return False

    def get_piece_position(self, row, col):
        items = self.canvas.find_overlapping(col * CELL_SIZE, row * CELL_SIZE,
                                             (col + 1) * CELL_SIZE, (row + 1) * CELL_SIZE)
        for item in items:
            if self.canvas.itemcget(item, "fill") in ("red", "black", "darkred", "gray20"):
                return item
        return None

    def move_piece(self, target_row, target_col):
        piece = self.selected_piece
        if piece:
            self.canvas.move(piece, (target_col - self.selected_piece_position[1]) * CELL_SIZE,
                             (target_row - self.selected_piece_position[0]) * CELL_SIZE)

    def check_for_king(self, row, col):
        piece = self.get_piece_position(row, col)
        if self.current_turn == "red" and row == 7:
            self.canvas.itemconfig(piece, fill="darkred")
        elif self.current_turn == "black" and row == 0:
            self.canvas.itemconfig(piece, fill="gray20")

    def switch_turn(self):
        self.current_turn = "black" if self.current_turn == "red" else "red"
        self.turn_label.config(text=f"Turn: {'Red' if self.current_turn == 'red' else 'Black'}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ThaiCheckersApp(root)
    root.mainloop()
